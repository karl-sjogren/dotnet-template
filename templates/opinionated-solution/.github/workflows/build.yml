name: 'Build and publish application'

on:
  push:
    branches:
      - develop
      - main
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
    paths-ignore:
      - 'README.md'
      - 'docs/*'
      - 'scripts/*'
      - '.vscode/*'

permissions:
  checks: write
  contents: write
  pull-requests: write
  actions: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  NUGET_CERT_REVOCATION_MODE: offline
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  PUBLISH_CODECOV: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/main')

jobs:
#if (addFrontendProject)
  frontend-test:
    name: Frontend tests
    runs-on: ubuntu-latest

    steps:
    # This is needed to pass linting consistently
    - name: Set GIT to use CRLF
      run: |
        git config --global core.autocrlf true
        git config --global core.eol crlf

    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        check-latest: true

    - name: Run Yarn
      run: yarn --immutable --immutable-cache
      working-directory: ./src/BASE_NAME.Frontend/

    - name: Run frontend linting
      run: |
        yarn lint:js
        yarn lint:css
      working-directory: ./src/BASE_NAME.Frontend/

    - name: Run frontend tests
      run: yarn test:ci
      working-directory: ./src/BASE_NAME.Frontend/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-results
        path: |
          ./src/BASE_NAME.Frontend/test-results/junit.xml
          ./src/BASE_NAME.Frontend/coverage/cobertura-coverage.xml

  frontend-build:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: [ frontend-test ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        check-latest: true

    - name: Run Yarn
      run: yarn --immutable --immutable-cache
      working-directory: ./src/BASE_NAME.Frontend/

    - name: Build Frontend
      run: yarn build
      working-directory: ./src/BASE_NAME.Frontend/
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: ./src/BASE_NAME.Web/wwwroot/
#endif

  net-test:
    name: .NET tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Run .NET tests
      run: dotnet test --configuration Release

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: net-test-results
        path: |
          ./**/*.trx
          ./**/coverage.cobertura.xml

  test-and-coverage-results:
    name: Publish test and coverage results
    runs-on: ubuntu-latest

#if addFrontendProject
    needs: [ net-test, frontend-test ]
#else
    needs: [ net-test ]
#endif

    steps:
    # While we don't use sources directly in this job the test reporter wants to check
    # some files through git so we need the sources.
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Download .NET tests results
      uses: actions/download-artifact@v5
      with:
        name: net-test-results
        path: ./

    - name: Publish .NET tests
      uses: dorny/test-reporter@v2
      with:
        name: üß™ .NET test results
        path: ./**/*.trx
        reporter: dotnet-trx

    - name: Create history folder
      run: mkdir ./coverage-history
      working-directory: ./

    - name: Download historial coverage
      uses: dawidd6/action-download-artifact@v11
      with:
        workflow_conclusion: success
        branch: ${{ github.head_ref }}
        name: coverage-history
        path: ./coverage-history
        check_artifacts:  true
        search_artifacts: true
        if_no_artifact_found: ignore

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: '../**/coverage.cobertura.xml;../**/cobertura-coverage.xml'
        targetdir: 'coverage-report'
        historydir: 'coverage-history'
        reporttypes: 'Html;MarkdownSummary;MarkdownDeltaSummary;Cobertura'
        assemblyfilters: '-xunit*'
        verbosity: 'Info'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report

    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      # To save on uploads, only upload coverage from the main branches and PRs
      if: env.PUBLISH_CODECOV
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage-report/Cobertura.xml

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history
        path: coverage-history

    - name: Publish code coverage summary to run
      uses: LouisBrunner/checks-action@v2.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        conclusion: ${{ job.status }}
        name: üìù Code coverage
        output: "{\"summary\":\"Summary of code coverage. For more detailed information, download the full artifact from the run.\"}"
        output_text_description_file: ./coverage-report/Summary.md

  net-build:
    name: .NET build
    runs-on: ubuntu-latest

#if addFrontendProject
    needs: [ net-test, frontend-test ]
#else
    needs: [ net-test ]
#endif

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Publish application
      run: dotnet publish --output ./artifacts --configuration Release
      working-directory: ./

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: publish-artifacts
        path: ./artifacts/
        if-no-files-found: error
